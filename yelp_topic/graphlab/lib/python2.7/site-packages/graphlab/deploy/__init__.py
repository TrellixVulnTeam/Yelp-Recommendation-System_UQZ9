"""
GraphLab offers multiple ways to work with your data beyond your desktop or
laptop. GraphLab Create makes it easy to take predictive applications to
production, enabling batch processing with GraphLab Data Pipelines, and
real-time querying and consumption of Predictive Objects (ie. Models) with
GraphLab Predictive Services.

Explore the detailed functionality via the following API documentation or the
`Deployment chapter of the User Guide
<http://www.graphlab.com/learn/userguide/index.html#Deployment>`_, as well as the
`Gallery <http://www.graphlab.com/learn/gallery>`_.
"""

__all__ = [ 'Task', 'tasks', 'environments', 'jobs', 'job' ]

# Job
from _job import Job as _Job

# Tasks and pipelines
from _artifact import Task
from _artifact import Pipeline as _Pipeline

import _session
_default_session = _session.open()

import _hadoop_wrap as _hadoop_wrap
from environment import Environment as _Environment

# session helpers
tasks = _session.ScopedSession(_default_session, Task, """
View and manage Tasks available in the workbench.

Tasks currently available can be listed, loaded, and deleted using this object.
This object represents the portion of the workbench for Tasks that have been
defined in GraphLab Create.

Refer to :py:class:`~graphlab.deploy._session.ScopedSession` for how to manage
task list.

Examples
--------
>>> t = graphlab.deploy.Task("init-ex1-task")
>>> graphlab.deploy.tasks
Task(s):
+-------+---------------+------+------------------+
| Index |      Name     | Type | Unsaved changes? |
+-------+---------------+------+------------------+
|   0   | init-ex1-task | Task |       Yes        |
+-------+---------------+------+------------------+
>>>
>>> # to load a Task by index number:
>>> task = graphlab.deploy.tasks[0]
>>> # to load a Task by name:
>>> task = graphlab.deploy.tasks['init-ex1-task']
>>>
>>> # to delete a Task by name (deleting by index number also supported):
>>> del graphlab.deploy.tasks['init-ex1-task']
""")

environments = _session.ScopedSession(_default_session, _Environment, """
View and manage Environments available in the workbench.

Environments currently available can be listed, loaded, and deleted using this
object.  This object represents the portion of the workbench for Environments
that have been defined in GraphLab Create.

Refer to :py:class:`~graphlab.deploy._session.ScopedSession` for how to manage
environment list.

Examples
--------

>>> my_env = graphlab.deploy.environment.Local("init-ex2-env")
>>> graphlab.deploy.environments
Environment(s):
+-------+--------------+------------------+------------------+
| Index |     Name     |       Type       | Unsaved changes? |
+-------+--------------+------------------+------------------+
|   0   | init-ex2-env | LocalEnvironment |       Yes        |
+-------+--------------+------------------+------------------+
>>>
>>> # to load an Environment by index number:
>>> environment = graphlab.deploy.environments[0]
>>> # to load an Environment by name:
>>> environment = graphlab.deploy.environments['init-ex2-env']
>>>
>>> # to delete an Environment by name
>>> # (deleting by index number also supported):
>>> del graphlab.deploy.environments['init-ex2-env']

""")

jobs = _session.ScopedSession(_default_session, _Job, """
View and manage Jobs available in the workbench.

Jobs currently available can be listed, loaded, deleted, and can be visualized
in Canvas using this object. This object represents the portion of the workbench
for Jobs that have been defined in GraphLab Create.

Refer to :py:class:`~graphlab.deploy._session.ScopedSession` for how to manage
job list.

Examples
--------

>>> t = graphlab.deploy.Task("print-hello-world-task")
>>> my_env = graphlab.deploy.environment.Local("init-ex3-env")
>>> def hello_world(task): print "Hello, world"
>>> t.set_code(hello_world)
>>> graphlab.deploy.job.create(t, environment=my_env)
>>> graphlab.deploy.jobs
Job(s):
+-------+----------------------------------------------------+------+------------------+
| Index |                        Name                        | Type | Unsaved changes? |
+-------+----------------------------------------------------+------+------------------+
|   0   | job-print-hello-world-task-init-ex3-env-1407900916 | Job  |        No        |
+-------+----------------------------------------------------+------+------------------+
>>>
>>> # to load a Job by index number:
>>> job = graphlab.deploy.jobs[0]
>>> # to load a Job by name:
>>> job = graphlab.deploy.jobs['job-print-hello-world-task-init-ex3-env-1407900916']
>>>
>>> # to visualize a Job in Canvas:
>>> job.show()
>>> # to visualize a list of Jobs in Canvas:
>>> graphlab.deploy.jobs.show()
>>>
>>> # to delete a Job by index number (deleting by name also supported):
>>> del graphlab.deploy.jobs[0]

""")

import job
import predictive_service

from _predictive_service._model_predictive_object import ModelPredictiveObject as _ModelPredictiveObject
from _predictive_service import _file_util as _file_util
from _predictive_service._predictive_service import PredictiveService as _PredictiveService

predictive_services =  _session.ScopedSession(_default_session, _PredictiveService, """
View and manage Predictive Services available in the workbench.

Predictive Services currently available can be listed, loaded, deleted, and
visualized in Canvas using this object. This object represents the portion of the 
workbench for Predictive Services that have been defined in GraphLab Create.

Refer to :py:class:`~graphlab.deploy._session.ScopedSession` for how to manage
predictive object list.

Examples
--------

>>> env = graphlab.deploy.environment.EC2("test-env", "s3://bucket/logs")
>>> ps = graphlab.deploy.predictive_service.create("testPS", env, "s3://bucket/testPS")
>>> graphlab.deploy.predictive_services
PredictiveService(s):
+-------+--------------+---------------------------+------------------+
| Index |     Name     |            Type           | Unsaved changes? |
+-------+--------------+---------------------------+------------------+
|   0   |    testPS    |     PredictiveService     |        No        |
+-------+--------------+---------------------------+------------------+
>>>
>>> # to load a Predictive Service by index number:
>>> ps = graphlab.deploy.predictive_services[0]
>>> # to load a Predictive Service by name:
>>> ps = graphlab.deploy.predictive_services['testPS']
>>>
>>> # to load a Predictive Service by s3 path:
>>> ps = graphlab.deploy.predictive_service.load("s3://bucket/testPS")
>>>
>>> # to visualize a Predictive Service in Canvas:
>>> ps.show()
>>> # to visualize a list of Predictive Services in Canvas:
>>> graphlab.deploy.predictive_services.show()
>>>
>>> # to remove a Predictive Service from local workspace by index number 
>>> # (deleting by name also supported):
>>> # Note: this operation does NOT terminate the Predictive Service
>>> del graphlab.deploy.predictive_services[0]

""")

from _parallel import parallel_for_each
